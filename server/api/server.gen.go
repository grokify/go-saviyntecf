// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Accounts defines model for accounts.
type Accounts struct {
	Accounts *[]struct {
		ACCOUNTCLASS             *string `json:"ACCOUNTCLASS,omitempty"`
		ACCOUNTID                *string `json:"ACCOUNTID,omitempty"`
		ACCOUNTTYPE              *string `json:"ACCOUNTTYPE,omitempty"`
		COMMENTS                 *string `json:"COMMENTS,omitempty"`
		CUSTOMPROPERTY1          *string `json:"CUSTOMPROPERTY1,omitempty"`
		CUSTOMPROPERTY10         *string `json:"CUSTOMPROPERTY10,omitempty"`
		CUSTOMPROPERTY11         *string `json:"CUSTOMPROPERTY11,omitempty"`
		CUSTOMPROPERTY12         *string `json:"CUSTOMPROPERTY12,omitempty"`
		CUSTOMPROPERTY13         *string `json:"CUSTOMPROPERTY13,omitempty"`
		CUSTOMPROPERTY14         *string `json:"CUSTOMPROPERTY14,omitempty"`
		CUSTOMPROPERTY15         *string `json:"CUSTOMPROPERTY15,omitempty"`
		CUSTOMPROPERTY16         *string `json:"CUSTOMPROPERTY16,omitempty"`
		CUSTOMPROPERTY17         *string `json:"CUSTOMPROPERTY17,omitempty"`
		CUSTOMPROPERTY18         *string `json:"CUSTOMPROPERTY18,omitempty"`
		CUSTOMPROPERTY19         *string `json:"CUSTOMPROPERTY19,omitempty"`
		CUSTOMPROPERTY2          *string `json:"CUSTOMPROPERTY2,omitempty"`
		CUSTOMPROPERTY20         *string `json:"CUSTOMPROPERTY20,omitempty"`
		CUSTOMPROPERTY21         *string `json:"CUSTOMPROPERTY21,omitempty"`
		CUSTOMPROPERTY22         *string `json:"CUSTOMPROPERTY22,omitempty"`
		CUSTOMPROPERTY23         *string `json:"CUSTOMPROPERTY23,omitempty"`
		CUSTOMPROPERTY24         *string `json:"CUSTOMPROPERTY24,omitempty"`
		CUSTOMPROPERTY25         *string `json:"CUSTOMPROPERTY25,omitempty"`
		CUSTOMPROPERTY26         *string `json:"CUSTOMPROPERTY26,omitempty"`
		CUSTOMPROPERTY27         *string `json:"CUSTOMPROPERTY27,omitempty"`
		CUSTOMPROPERTY28         *string `json:"CUSTOMPROPERTY28,omitempty"`
		CUSTOMPROPERTY29         *string `json:"CUSTOMPROPERTY29,omitempty"`
		CUSTOMPROPERTY3          *string `json:"CUSTOMPROPERTY3,omitempty"`
		CUSTOMPROPERTY30         *int    `json:"CUSTOMPROPERTY30,omitempty"`
		CUSTOMPROPERTY31         *string `json:"CUSTOMPROPERTY31,omitempty"`
		CUSTOMPROPERTY32         *string `json:"CUSTOMPROPERTY32,omitempty"`
		CUSTOMPROPERTY33         *string `json:"CUSTOMPROPERTY33,omitempty"`
		CUSTOMPROPERTY34         *string `json:"CUSTOMPROPERTY34,omitempty"`
		CUSTOMPROPERTY35         *string `json:"CUSTOMPROPERTY35,omitempty"`
		CUSTOMPROPERTY36         *string `json:"CUSTOMPROPERTY36,omitempty"`
		CUSTOMPROPERTY37         *string `json:"CUSTOMPROPERTY37,omitempty"`
		CUSTOMPROPERTY38         *string `json:"CUSTOMPROPERTY38,omitempty"`
		CUSTOMPROPERTY39         *string `json:"CUSTOMPROPERTY39,omitempty"`
		CUSTOMPROPERTY4          *string `json:"CUSTOMPROPERTY4,omitempty"`
		CUSTOMPROPERTY40         *string `json:"CUSTOMPROPERTY40,omitempty"`
		CUSTOMPROPERTY41         *string `json:"CUSTOMPROPERTY41,omitempty"`
		CUSTOMPROPERTY42         *string `json:"CUSTOMPROPERTY42,omitempty"`
		CUSTOMPROPERTY43         *string `json:"CUSTOMPROPERTY43,omitempty"`
		CUSTOMPROPERTY44         *string `json:"CUSTOMPROPERTY44,omitempty"`
		CUSTOMPROPERTY45         *string `json:"CUSTOMPROPERTY45,omitempty"`
		CUSTOMPROPERTY46         *string `json:"CUSTOMPROPERTY46,omitempty"`
		CUSTOMPROPERTY47         *string `json:"CUSTOMPROPERTY47,omitempty"`
		CUSTOMPROPERTY48         *string `json:"CUSTOMPROPERTY48,omitempty"`
		CUSTOMPROPERTY49         *string `json:"CUSTOMPROPERTY49,omitempty"`
		CUSTOMPROPERTY5          *string `json:"CUSTOMPROPERTY5,omitempty"`
		CUSTOMPROPERTY50         *string `json:"CUSTOMPROPERTY50,omitempty"`
		CUSTOMPROPERTY51         *string `json:"CUSTOMPROPERTY51,omitempty"`
		CUSTOMPROPERTY52         *string `json:"CUSTOMPROPERTY52,omitempty"`
		CUSTOMPROPERTY53         *string `json:"CUSTOMPROPERTY53,omitempty"`
		CUSTOMPROPERTY54         *string `json:"CUSTOMPROPERTY54,omitempty"`
		CUSTOMPROPERTY55         *string `json:"CUSTOMPROPERTY55,omitempty"`
		CUSTOMPROPERTY56         *string `json:"CUSTOMPROPERTY56,omitempty"`
		CUSTOMPROPERTY57         *string `json:"CUSTOMPROPERTY57,omitempty"`
		CUSTOMPROPERTY58         *string `json:"CUSTOMPROPERTY58,omitempty"`
		CUSTOMPROPERTY59         *string `json:"CUSTOMPROPERTY59,omitempty"`
		CUSTOMPROPERTY6          *string `json:"CUSTOMPROPERTY6,omitempty"`
		CUSTOMPROPERTY60         *string `json:"CUSTOMPROPERTY60,omitempty"`
		CUSTOMPROPERTY7          *string `json:"CUSTOMPROPERTY7,omitempty"`
		CUSTOMPROPERTY8          *string `json:"CUSTOMPROPERTY8,omitempty"`
		CUSTOMPROPERTY9          *string `json:"CUSTOMPROPERTY9,omitempty"`
		DESCRIPTION              *string `json:"DESCRIPTION,omitempty"`
		DISPLAYNAME              *string `json:"DISPLAYNAME,omitempty"`
		INCORRECTLOGONS          *string `json:"INCORRECTLOGONS,omitempty"`
		LASTLOGONDATE            *string `json:"LASTLOGONDATE,omitempty"`
		LASTPASSWORDCHANGE       *string `json:"LASTPASSWORDCHANGE,omitempty"`
		LOCKEDSTATE              *string `json:"LOCKEDSTATE,omitempty"`
		NAME                     *string `json:"NAME,omitempty"`
		PASSWORDCHANGESTATUS     *string `json:"PASSWORDCHANGESTATUS,omitempty"`
		PASSWORDLOCKDATE         *string `json:"PASSWORDLOCKDATE,omitempty"`
		STATUS                   *int    `json:"STATUS,omitempty"`
		TARGETLASTPASSWORDCHANGE *string `json:"TARGETLASTPASSWORDCHANGE,omitempty"`
		UPDATEDATE               *string `json:"UPDATEDATE,omitempty"`
		VALIDFROM                *string `json:"VALIDFROM,omitempty"`
		VALIDTHROUGH             *string `json:"VALIDTHROUGH,omitempty"`
	} `json:"accounts,omitempty"`
	Count      *int    `json:"count,omitempty"`
	Offset     *string `json:"offset,omitempty"`
	TotalCount *int    `json:"totalCount,omitempty"`
}

// Createaccount defines model for createaccount.
type Createaccount struct {
	AccountID         *string `json:"accountID,omitempty"`
	Customproperty1   *string `json:"customproperty1,omitempty"`
	Email             *string `json:"email,omitempty"`
	EmployeeType      *string `json:"employeeType,omitempty"`
	Firstname         *string `json:"firstname,omitempty"`
	Jobcodedesc       *string `json:"jobcodedesc,omitempty"`
	Lastname          *string `json:"lastname,omitempty"`
	Manager           *string `json:"manager,omitempty"`
	Middlename        *string `json:"middlename,omitempty"`
	PreferedFirstName *string `json:"preferedFirstName,omitempty"`
	Statuskey         *string `json:"statuskey,omitempty"`
}

// Groups defines model for groups.
type Groups struct {
	Count  *int `json:"count,omitempty"`
	Groups *[]struct {
		CUSTOMPROPERTY1   *string    `json:"CUSTOMPROPERTY1,omitempty"`
		CUSTOMPROPERTY10  *string    `json:"CUSTOMPROPERTY10,omitempty"`
		CUSTOMPROPERTY11  *string    `json:"CUSTOMPROPERTY11,omitempty"`
		CUSTOMPROPERTY12  *string    `json:"CUSTOMPROPERTY12,omitempty"`
		CUSTOMPROPERTY13  *string    `json:"CUSTOMPROPERTY13,omitempty"`
		CUSTOMPROPERTY14  *string    `json:"CUSTOMPROPERTY14,omitempty"`
		CUSTOMPROPERTY15  *string    `json:"CUSTOMPROPERTY15,omitempty"`
		CUSTOMPROPERTY16  *string    `json:"CUSTOMPROPERTY16,omitempty"`
		CUSTOMPROPERTY17  *string    `json:"CUSTOMPROPERTY17,omitempty"`
		CUSTOMPROPERTY18  *string    `json:"CUSTOMPROPERTY18,omitempty"`
		CUSTOMPROPERTY19  *string    `json:"CUSTOMPROPERTY19,omitempty"`
		CUSTOMPROPERTY2   *time.Time `json:"CUSTOMPROPERTY2,omitempty"`
		CUSTOMPROPERTY20  *string    `json:"CUSTOMPROPERTY20,omitempty"`
		CUSTOMPROPERTY21  *string    `json:"CUSTOMPROPERTY21,omitempty"`
		CUSTOMPROPERTY22  *string    `json:"CUSTOMPROPERTY22,omitempty"`
		CUSTOMPROPERTY23  *string    `json:"CUSTOMPROPERTY23,omitempty"`
		CUSTOMPROPERTY24  *string    `json:"CUSTOMPROPERTY24,omitempty"`
		CUSTOMPROPERTY25  *string    `json:"CUSTOMPROPERTY25,omitempty"`
		CUSTOMPROPERTY26  *string    `json:"CUSTOMPROPERTY26,omitempty"`
		CUSTOMPROPERTY27  *string    `json:"CUSTOMPROPERTY27,omitempty"`
		CUSTOMPROPERTY28  *string    `json:"CUSTOMPROPERTY28,omitempty"`
		CUSTOMPROPERTY29  *string    `json:"CUSTOMPROPERTY29,omitempty"`
		CUSTOMPROPERTY3   *time.Time `json:"CUSTOMPROPERTY3,omitempty"`
		CUSTOMPROPERTY30  *int       `json:"CUSTOMPROPERTY30,omitempty"`
		CUSTOMPROPERTY31  *string    `json:"CUSTOMPROPERTY31,omitempty"`
		CUSTOMPROPERTY32  *string    `json:"CUSTOMPROPERTY32,omitempty"`
		CUSTOMPROPERTY33  *string    `json:"CUSTOMPROPERTY33,omitempty"`
		CUSTOMPROPERTY34  *string    `json:"CUSTOMPROPERTY34,omitempty"`
		CUSTOMPROPERTY35  *string    `json:"CUSTOMPROPERTY35,omitempty"`
		CUSTOMPROPERTY36  *string    `json:"CUSTOMPROPERTY36,omitempty"`
		CUSTOMPROPERTY37  *string    `json:"CUSTOMPROPERTY37,omitempty"`
		CUSTOMPROPERTY38  *string    `json:"CUSTOMPROPERTY38,omitempty"`
		CUSTOMPROPERTY39  *string    `json:"CUSTOMPROPERTY39,omitempty"`
		CUSTOMPROPERTY4   *string    `json:"CUSTOMPROPERTY4,omitempty"`
		CUSTOMPROPERTY40  *string    `json:"CUSTOMPROPERTY40,omitempty"`
		CUSTOMPROPERTY5   *string    `json:"CUSTOMPROPERTY5,omitempty"`
		CUSTOMPROPERTY6   *string    `json:"CUSTOMPROPERTY6,omitempty"`
		CUSTOMPROPERTY7   *string    `json:"CUSTOMPROPERTY7,omitempty"`
		CUSTOMPROPERTY8   *string    `json:"CUSTOMPROPERTY8,omitempty"`
		CUSTOMPROPERTY9   *string    `json:"CUSTOMPROPERTY9,omitempty"`
		ChildEntitlements *struct {
			Groups *[]struct {
				EntitlementID *int `json:"entitlementID,omitempty"`
			} `json:"groups,omitempty"`
		} `json:"childEntitlements,omitempty"`
		Description         *string   `json:"description,omitempty"`
		Displayname         *string   `json:"displayname,omitempty"`
		Entclass            *string   `json:"entclass,omitempty"`
		EntitlementID       *int      `json:"entitlementID,omitempty"`
		EntitlementGlossary *string   `json:"entitlement_glossary,omitempty"`
		EntitlementValue    *string   `json:"entitlement_value,omitempty"`
		Owners              *[]string `json:"owners,omitempty"`
		Status              *string   `json:"status,omitempty"`
	} `json:"groups,omitempty"`
}

// Groupsmembership defines model for groupsmembership.
type Groupsmembership struct {
	Count            *int `json:"count,omitempty"`
	GroupMemberships *[]struct {
		AccountID     *int `json:"accountID,omitempty"`
		EntitlementID *int `json:"entitlementID,omitempty"`
	} `json:"group_memberships,omitempty"`
}

// Roles defines model for roles.
type Roles struct {
	Count *int `json:"count,omitempty"`
	Roles *[]struct {
		CUSTOMPROPERTY1   *string    `json:"CUSTOMPROPERTY1,omitempty"`
		CUSTOMPROPERTY10  *string    `json:"CUSTOMPROPERTY10,omitempty"`
		CUSTOMPROPERTY11  *string    `json:"CUSTOMPROPERTY11,omitempty"`
		CUSTOMPROPERTY12  *string    `json:"CUSTOMPROPERTY12,omitempty"`
		CUSTOMPROPERTY13  *string    `json:"CUSTOMPROPERTY13,omitempty"`
		CUSTOMPROPERTY14  *string    `json:"CUSTOMPROPERTY14,omitempty"`
		CUSTOMPROPERTY15  *string    `json:"CUSTOMPROPERTY15,omitempty"`
		CUSTOMPROPERTY16  *string    `json:"CUSTOMPROPERTY16,omitempty"`
		CUSTOMPROPERTY17  *string    `json:"CUSTOMPROPERTY17,omitempty"`
		CUSTOMPROPERTY18  *string    `json:"CUSTOMPROPERTY18,omitempty"`
		CUSTOMPROPERTY19  *string    `json:"CUSTOMPROPERTY19,omitempty"`
		CUSTOMPROPERTY2   *time.Time `json:"CUSTOMPROPERTY2,omitempty"`
		CUSTOMPROPERTY20  *string    `json:"CUSTOMPROPERTY20,omitempty"`
		CUSTOMPROPERTY21  *string    `json:"CUSTOMPROPERTY21,omitempty"`
		CUSTOMPROPERTY22  *string    `json:"CUSTOMPROPERTY22,omitempty"`
		CUSTOMPROPERTY23  *string    `json:"CUSTOMPROPERTY23,omitempty"`
		CUSTOMPROPERTY24  *string    `json:"CUSTOMPROPERTY24,omitempty"`
		CUSTOMPROPERTY25  *string    `json:"CUSTOMPROPERTY25,omitempty"`
		CUSTOMPROPERTY26  *string    `json:"CUSTOMPROPERTY26,omitempty"`
		CUSTOMPROPERTY27  *string    `json:"CUSTOMPROPERTY27,omitempty"`
		CUSTOMPROPERTY28  *string    `json:"CUSTOMPROPERTY28,omitempty"`
		CUSTOMPROPERTY29  *string    `json:"CUSTOMPROPERTY29,omitempty"`
		CUSTOMPROPERTY3   *time.Time `json:"CUSTOMPROPERTY3,omitempty"`
		CUSTOMPROPERTY30  *int       `json:"CUSTOMPROPERTY30,omitempty"`
		CUSTOMPROPERTY31  *string    `json:"CUSTOMPROPERTY31,omitempty"`
		CUSTOMPROPERTY32  *string    `json:"CUSTOMPROPERTY32,omitempty"`
		CUSTOMPROPERTY33  *string    `json:"CUSTOMPROPERTY33,omitempty"`
		CUSTOMPROPERTY34  *string    `json:"CUSTOMPROPERTY34,omitempty"`
		CUSTOMPROPERTY35  *string    `json:"CUSTOMPROPERTY35,omitempty"`
		CUSTOMPROPERTY36  *string    `json:"CUSTOMPROPERTY36,omitempty"`
		CUSTOMPROPERTY37  *string    `json:"CUSTOMPROPERTY37,omitempty"`
		CUSTOMPROPERTY38  *string    `json:"CUSTOMPROPERTY38,omitempty"`
		CUSTOMPROPERTY39  *string    `json:"CUSTOMPROPERTY39,omitempty"`
		CUSTOMPROPERTY4   *string    `json:"CUSTOMPROPERTY4,omitempty"`
		CUSTOMPROPERTY40  *string    `json:"CUSTOMPROPERTY40,omitempty"`
		CUSTOMPROPERTY5   *string    `json:"CUSTOMPROPERTY5,omitempty"`
		CUSTOMPROPERTY6   *string    `json:"CUSTOMPROPERTY6,omitempty"`
		CUSTOMPROPERTY7   *string    `json:"CUSTOMPROPERTY7,omitempty"`
		CUSTOMPROPERTY8   *string    `json:"CUSTOMPROPERTY8,omitempty"`
		CUSTOMPROPERTY9   *string    `json:"CUSTOMPROPERTY9,omitempty"`
		ChildEntitlements *struct {
			Roles *[]struct {
				EntitlementID *int `json:"entitlementID,omitempty"`
			} `json:"roles,omitempty"`
		} `json:"childEntitlements,omitempty"`
		Description         *string   `json:"description,omitempty"`
		Displayname         *string   `json:"displayname,omitempty"`
		Entclass            *string   `json:"entclass,omitempty"`
		EntitlementID       *int      `json:"entitlementID,omitempty"`
		EntitlementGlossary *string   `json:"entitlement_glossary,omitempty"`
		EntitlementValue    *string   `json:"entitlement_value,omitempty"`
		Owners              *[]string `json:"owners,omitempty"`
		Status              *string   `json:"status,omitempty"`
	} `json:"roles,omitempty"`
}

// Rolesmembership defines model for rolesmembership.
type Rolesmembership struct {
	Count           *int `json:"count,omitempty"`
	RoleMemberships *[]struct {
		AccountID     *int `json:"accountID,omitempty"`
		EntitlementID *int `json:"entitlementID,omitempty"`
	} `json:"role_memberships,omitempty"`
}

// Updateaccount defines model for updateaccount.
type Updateaccount struct {
	Customproperty1   *string `json:"customproperty1,omitempty"`
	Email             *string `json:"email,omitempty"`
	EmployeeType      *string `json:"employeeType,omitempty"`
	Firstname         *string `json:"firstname,omitempty"`
	Jobcodedesc       *string `json:"jobcodedesc,omitempty"`
	Lastname          *string `json:"lastname,omitempty"`
	Manager           *string `json:"manager,omitempty"`
	Middlename        *string `json:"middlename,omitempty"`
	PreferedFirstName *string `json:"preferedFirstName,omitempty"`
	Statuskey         *string `json:"statuskey,omitempty"`
}

// Updateuser defines model for updateuser.
type Updateuser struct {
	Customproperty1   *string `json:"customproperty1,omitempty"`
	Email             *string `json:"email,omitempty"`
	EmployeeType      *string `json:"employeeType,omitempty"`
	Firstname         *string `json:"firstname,omitempty"`
	Jobcodedesc       *string `json:"jobcodedesc,omitempty"`
	Lastname          *string `json:"lastname,omitempty"`
	Manager           *string `json:"manager,omitempty"`
	Middlename        *string `json:"middlename,omitempty"`
	PreferedFirstName *string `json:"preferedFirstName,omitempty"`
	Statuskey         *string `json:"statuskey,omitempty"`
}

// Users defines model for users.
type Users struct {
	Count      *int    `json:"count,omitempty"`
	Offset     *string `json:"offset,omitempty"`
	TotalCount *int    `json:"totalCount,omitempty"`
	Users      *[]struct {
		ACCOUNTEXPIRED    *int    `json:"ACCOUNTEXPIRED,omitempty"`
		ACCOUNTLOCKED     *int    `json:"ACCOUNTLOCKED,omitempty"`
		CITY              *string `json:"CITY,omitempty"`
		COMMENTS          *string `json:"COMMENTS,omitempty"`
		COMPANYNAME       *string `json:"COMPANYNAME,omitempty"`
		COSTCENTER        *string `json:"COSTCENTER,omitempty"`
		COUNTRY           *string `json:"COUNTRY,omitempty"`
		CUSTOMPROPERTY1   *string `json:"CUSTOMPROPERTY1,omitempty"`
		CUSTOMPROPERTY10  *string `json:"CUSTOMPROPERTY10,omitempty"`
		CUSTOMPROPERTY11  *string `json:"CUSTOMPROPERTY11,omitempty"`
		CUSTOMPROPERTY12  *string `json:"CUSTOMPROPERTY12,omitempty"`
		CUSTOMPROPERTY13  *string `json:"CUSTOMPROPERTY13,omitempty"`
		CUSTOMPROPERTY14  *string `json:"CUSTOMPROPERTY14,omitempty"`
		CUSTOMPROPERTY15  *string `json:"CUSTOMPROPERTY15,omitempty"`
		CUSTOMPROPERTY16  *string `json:"CUSTOMPROPERTY16,omitempty"`
		CUSTOMPROPERTY17  *string `json:"CUSTOMPROPERTY17,omitempty"`
		CUSTOMPROPERTY18  *string `json:"CUSTOMPROPERTY18,omitempty"`
		CUSTOMPROPERTY19  *string `json:"CUSTOMPROPERTY19,omitempty"`
		CUSTOMPROPERTY2   *string `json:"CUSTOMPROPERTY2,omitempty"`
		CUSTOMPROPERTY20  *string `json:"CUSTOMPROPERTY20,omitempty"`
		CUSTOMPROPERTY21  *string `json:"CUSTOMPROPERTY21,omitempty"`
		CUSTOMPROPERTY22  *string `json:"CUSTOMPROPERTY22,omitempty"`
		CUSTOMPROPERTY23  *string `json:"CUSTOMPROPERTY23,omitempty"`
		CUSTOMPROPERTY24  *string `json:"CUSTOMPROPERTY24,omitempty"`
		CUSTOMPROPERTY25  *string `json:"CUSTOMPROPERTY25,omitempty"`
		CUSTOMPROPERTY26  *string `json:"CUSTOMPROPERTY26,omitempty"`
		CUSTOMPROPERTY27  *string `json:"CUSTOMPROPERTY27,omitempty"`
		CUSTOMPROPERTY28  *string `json:"CUSTOMPROPERTY28,omitempty"`
		CUSTOMPROPERTY29  *string `json:"CUSTOMPROPERTY29,omitempty"`
		CUSTOMPROPERTY3   *string `json:"CUSTOMPROPERTY3,omitempty"`
		CUSTOMPROPERTY30  *string `json:"CUSTOMPROPERTY30,omitempty"`
		CUSTOMPROPERTY31  *string `json:"CUSTOMPROPERTY31,omitempty"`
		CUSTOMPROPERTY32  *string `json:"CUSTOMPROPERTY32,omitempty"`
		CUSTOMPROPERTY33  *string `json:"CUSTOMPROPERTY33,omitempty"`
		CUSTOMPROPERTY34  *string `json:"CUSTOMPROPERTY34,omitempty"`
		CUSTOMPROPERTY35  *string `json:"CUSTOMPROPERTY35,omitempty"`
		CUSTOMPROPERTY36  *string `json:"CUSTOMPROPERTY36,omitempty"`
		CUSTOMPROPERTY37  *string `json:"CUSTOMPROPERTY37,omitempty"`
		CUSTOMPROPERTY38  *string `json:"CUSTOMPROPERTY38,omitempty"`
		CUSTOMPROPERTY39  *string `json:"CUSTOMPROPERTY39,omitempty"`
		CUSTOMPROPERTY4   *string `json:"CUSTOMPROPERTY4,omitempty"`
		CUSTOMPROPERTY40  *string `json:"CUSTOMPROPERTY40,omitempty"`
		CUSTOMPROPERTY41  *string `json:"CUSTOMPROPERTY41,omitempty"`
		CUSTOMPROPERTY42  *string `json:"CUSTOMPROPERTY42,omitempty"`
		CUSTOMPROPERTY43  *string `json:"CUSTOMPROPERTY43,omitempty"`
		CUSTOMPROPERTY44  *string `json:"CUSTOMPROPERTY44,omitempty"`
		CUSTOMPROPERTY45  *string `json:"CUSTOMPROPERTY45,omitempty"`
		CUSTOMPROPERTY46  *string `json:"CUSTOMPROPERTY46,omitempty"`
		CUSTOMPROPERTY47  *string `json:"CUSTOMPROPERTY47,omitempty"`
		CUSTOMPROPERTY48  *string `json:"CUSTOMPROPERTY48,omitempty"`
		CUSTOMPROPERTY49  *string `json:"CUSTOMPROPERTY49,omitempty"`
		CUSTOMPROPERTY5   *string `json:"CUSTOMPROPERTY5,omitempty"`
		CUSTOMPROPERTY50  *string `json:"CUSTOMPROPERTY50,omitempty"`
		CUSTOMPROPERTY51  *string `json:"CUSTOMPROPERTY51,omitempty"`
		CUSTOMPROPERTY52  *string `json:"CUSTOMPROPERTY52,omitempty"`
		CUSTOMPROPERTY53  *string `json:"CUSTOMPROPERTY53,omitempty"`
		CUSTOMPROPERTY54  *string `json:"CUSTOMPROPERTY54,omitempty"`
		CUSTOMPROPERTY55  *string `json:"CUSTOMPROPERTY55,omitempty"`
		CUSTOMPROPERTY56  *string `json:"CUSTOMPROPERTY56,omitempty"`
		CUSTOMPROPERTY57  *string `json:"CUSTOMPROPERTY57,omitempty"`
		CUSTOMPROPERTY58  *string `json:"CUSTOMPROPERTY58,omitempty"`
		CUSTOMPROPERTY59  *string `json:"CUSTOMPROPERTY59,omitempty"`
		CUSTOMPROPERTY6   *string `json:"CUSTOMPROPERTY6,omitempty"`
		CUSTOMPROPERTY60  *string `json:"CUSTOMPROPERTY60,omitempty"`
		CUSTOMPROPERTY61  *string `json:"CUSTOMPROPERTY61,omitempty"`
		CUSTOMPROPERTY62  *string `json:"CUSTOMPROPERTY62,omitempty"`
		CUSTOMPROPERTY63  *string `json:"CUSTOMPROPERTY63,omitempty"`
		CUSTOMPROPERTY64  *string `json:"CUSTOMPROPERTY64,omitempty"`
		CUSTOMPROPERTY65  *string `json:"CUSTOMPROPERTY65,omitempty"`
		CUSTOMPROPERTY7   *string `json:"CUSTOMPROPERTY7,omitempty"`
		CUSTOMPROPERTY8   *string `json:"CUSTOMPROPERTY8,omitempty"`
		CUSTOMPROPERTY9   *string `json:"CUSTOMPROPERTY9,omitempty"`
		DEPARTMENTNAME    *string `json:"DEPARTMENTNAME,omitempty"`
		DEPARTMENTNUMBER  *string `json:"DEPARTMENTNUMBER,omitempty"`
		DISPLAYNAME       *string `json:"DISPLAYNAME,omitempty"`
		EMAIL             *string `json:"EMAIL,omitempty"`
		EMPLOYEECLASS     *string `json:"EMPLOYEECLASS,omitempty"`
		EMPLOYEEID        *string `json:"EMPLOYEEID,omitempty"`
		EMPLOYEETYPE      *string `json:"EMPLOYEETYPE,omitempty"`
		ENDDATE           *string `json:"ENDDATE,omitempty"`
		FIRSTNAME         *string `json:"FIRSTNAME,omitempty"`
		JOBCODE           *string `json:"JOBCODE,omitempty"`
		JOBCODEDESC       *string `json:"JOBCODEDESC,omitempty"`
		JOBDESCRIPTION    *string `json:"JOBDESCRIPTION,omitempty"`
		JOBFUNCTION       *string `json:"JOB_FUNCTION,omitempty"`
		LASTNAME          *string `json:"LASTNAME,omitempty"`
		LEAVESTATUS       *string `json:"LEAVESTATUS,omitempty"`
		LOCALE            *string `json:"LOCALE,omitempty"`
		LOCATION          *string `json:"LOCATION,omitempty"`
		LOCATIONDESC      *string `json:"LOCATIONDESC,omitempty"`
		LOCATIONNUMBER    *string `json:"LOCATIONNUMBER,omitempty"`
		MANAGER           *string `json:"MANAGER,omitempty"`
		MIDDLENAME        *string `json:"MIDDLENAME,omitempty"`
		ORGUNITID         *string `json:"ORGUNITID,omitempty"`
		PHONENUMBER       *string `json:"PHONENUMBER,omitempty"`
		PREFEREDFIRSTNAME *string `json:"PREFEREDFIRSTNAME,omitempty"`
		REGION            *string `json:"REGION,omitempty"`
		REGIONCODE        *string `json:"REGIONCODE,omitempty"`
		SECONDARYEMAIL    *string `json:"SECONDARYEMAIL,omitempty"`
		SECONDARYMANAGER  *string `json:"SECONDARYMANAGER,omitempty"`
		SECONDARYPHONE    *string `json:"SECONDARYPHONE,omitempty"`
		SITEID            *string `json:"SITEID,omitempty"`
		STARTDATE         *string `json:"STARTDATE,omitempty"`
		STATE             *string `json:"STATE,omitempty"`
		STATUSKEY         *string `json:"STATUSKEY,omitempty"`
		STREET            *string `json:"STREET,omitempty"`
		TERMDATE          *string `json:"TERMDATE,omitempty"`
		TITLE             *string `json:"TITLE,omitempty"`
		UPDATEDATE        *string `json:"UPDATEDATE,omitempty"`
		USERNAME          *string `json:"USERNAME,omitempty"`
	} `json:"users,omitempty"`
}

// PostApiV1AccountsJSONBody defines parameters for PostApiV1Accounts.
type PostApiV1AccountsJSONBody struct {
	Fields *string `json:"fields,omitempty"`
	Order  *string `json:"order,omitempty"`
	Q      *string `json:"q,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostApiV1AccountsParams defines parameters for PostApiV1Accounts.
type PostApiV1AccountsParams struct {
	Offset   *int `form:"offset,omitempty" json:"offset,omitempty"`
	Pagesize *int `form:"pagesize,omitempty" json:"pagesize,omitempty"`
}

// PutApiV1ChangePasswordJSONBody defines parameters for PutApiV1ChangePassword.
type PutApiV1ChangePasswordJSONBody struct {
	AccountID *string `json:"accountID,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// PutApiV1EntitlementGroupAddAccessJSONBody defines parameters for PutApiV1EntitlementGroupAddAccess.
type PutApiV1EntitlementGroupAddAccessJSONBody struct {
	AccountID     *string `json:"accountID,omitempty"`
	EntitlementID *string `json:"entitlementID,omitempty"`
}

// PutApiV1EntitlementGroupRemoveAccessJSONBody defines parameters for PutApiV1EntitlementGroupRemoveAccess.
type PutApiV1EntitlementGroupRemoveAccessJSONBody struct {
	AccountID     *string `json:"accountID,omitempty"`
	EntitlementID *string `json:"entitlementID,omitempty"`
}

// PutApiV1EntitlementRoleAddAccessJSONBody defines parameters for PutApiV1EntitlementRoleAddAccess.
type PutApiV1EntitlementRoleAddAccessJSONBody struct {
	AccountID     *string `json:"accountID,omitempty"`
	EntitlementID *string `json:"entitlementID,omitempty"`
}

// PutApiV1EntitlementRoleRemoveAccessJSONBody defines parameters for PutApiV1EntitlementRoleRemoveAccess.
type PutApiV1EntitlementRoleRemoveAccessJSONBody struct {
	AccountID     *string `json:"accountID,omitempty"`
	EntitlementID *string `json:"entitlementID,omitempty"`
}

// PostApiV1EntitlementsGroupsJSONBody defines parameters for PostApiV1EntitlementsGroups.
type PostApiV1EntitlementsGroupsJSONBody struct {
	Fields *string `json:"fields,omitempty"`
	Order  *string `json:"order,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostApiV1EntitlementsGroupsParams defines parameters for PostApiV1EntitlementsGroups.
type PostApiV1EntitlementsGroupsParams struct {
	Offset   *int `form:"offset,omitempty" json:"offset,omitempty"`
	Pagesize *int `form:"pagesize,omitempty" json:"pagesize,omitempty"`
}

// PostApiV1EntitlementsRolesJSONBody defines parameters for PostApiV1EntitlementsRoles.
type PostApiV1EntitlementsRolesJSONBody struct {
	Fields *string `json:"fields,omitempty"`
	Order  *string `json:"order,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostApiV1EntitlementsRolesParams defines parameters for PostApiV1EntitlementsRoles.
type PostApiV1EntitlementsRolesParams struct {
	Offset   *int `form:"offset,omitempty" json:"offset,omitempty"`
	Pagesize *int `form:"pagesize,omitempty" json:"pagesize,omitempty"`
}

// PatchApiV1UpdateAccountAccountID2JSONBody defines parameters for PatchApiV1UpdateAccountAccountID2.
type PatchApiV1UpdateAccountAccountID2JSONBody struct {
	Status *string `json:"status,omitempty"`
}

// PatchApiV1UpdateAccountAccountID3JSONBody defines parameters for PatchApiV1UpdateAccountAccountID3.
type PatchApiV1UpdateAccountAccountID3JSONBody struct {
	Status *string `json:"status,omitempty"`
}

// PostApiV1UsersJSONBody defines parameters for PostApiV1Users.
type PostApiV1UsersJSONBody struct {
	Fields *string `json:"fields,omitempty"`
	Order  *string `json:"order,omitempty"`
	Sort   *string `json:"sort,omitempty"`
}

// PostApiV1UsersParams defines parameters for PostApiV1Users.
type PostApiV1UsersParams struct {
	Offset   *int `form:"offset,omitempty" json:"offset,omitempty"`
	Pagesize *int `form:"pagesize,omitempty" json:"pagesize,omitempty"`
}

// PostApiV1AccountsJSONRequestBody defines body for PostApiV1Accounts for application/json ContentType.
type PostApiV1AccountsJSONRequestBody PostApiV1AccountsJSONBody

// PutApiV1ChangePasswordJSONRequestBody defines body for PutApiV1ChangePassword for application/json ContentType.
type PutApiV1ChangePasswordJSONRequestBody PutApiV1ChangePasswordJSONBody

// PostApiV1CreateAccountJSONRequestBody defines body for PostApiV1CreateAccount for application/json ContentType.
type PostApiV1CreateAccountJSONRequestBody = Createaccount

// PutApiV1EntitlementGroupAddAccessJSONRequestBody defines body for PutApiV1EntitlementGroupAddAccess for application/json ContentType.
type PutApiV1EntitlementGroupAddAccessJSONRequestBody PutApiV1EntitlementGroupAddAccessJSONBody

// PutApiV1EntitlementGroupRemoveAccessJSONRequestBody defines body for PutApiV1EntitlementGroupRemoveAccess for application/json ContentType.
type PutApiV1EntitlementGroupRemoveAccessJSONRequestBody PutApiV1EntitlementGroupRemoveAccessJSONBody

// PutApiV1EntitlementRoleAddAccessJSONRequestBody defines body for PutApiV1EntitlementRoleAddAccess for application/json ContentType.
type PutApiV1EntitlementRoleAddAccessJSONRequestBody PutApiV1EntitlementRoleAddAccessJSONBody

// PutApiV1EntitlementRoleRemoveAccessJSONRequestBody defines body for PutApiV1EntitlementRoleRemoveAccess for application/json ContentType.
type PutApiV1EntitlementRoleRemoveAccessJSONRequestBody PutApiV1EntitlementRoleRemoveAccessJSONBody

// PostApiV1EntitlementsGroupsJSONRequestBody defines body for PostApiV1EntitlementsGroups for application/json ContentType.
type PostApiV1EntitlementsGroupsJSONRequestBody PostApiV1EntitlementsGroupsJSONBody

// PostApiV1EntitlementsRolesJSONRequestBody defines body for PostApiV1EntitlementsRoles for application/json ContentType.
type PostApiV1EntitlementsRolesJSONRequestBody PostApiV1EntitlementsRolesJSONBody

// PatchApiV1UpdateAccountAccountID1JSONRequestBody defines body for PatchApiV1UpdateAccountAccountID1 for application/json ContentType.
type PatchApiV1UpdateAccountAccountID1JSONRequestBody = Updateaccount

// PatchApiV1UpdateAccountAccountID2JSONRequestBody defines body for PatchApiV1UpdateAccountAccountID2 for application/json ContentType.
type PatchApiV1UpdateAccountAccountID2JSONRequestBody PatchApiV1UpdateAccountAccountID2JSONBody

// PatchApiV1UpdateAccountAccountID3JSONRequestBody defines body for PatchApiV1UpdateAccountAccountID3 for application/json ContentType.
type PatchApiV1UpdateAccountAccountID3JSONRequestBody PatchApiV1UpdateAccountAccountID3JSONBody

// PatchApiV1UpdateUserUserNameJSONRequestBody defines body for PatchApiV1UpdateUserUserName for application/json ContentType.
type PatchApiV1UpdateUserUserNameJSONRequestBody = Updateuser

// PostApiV1UsersJSONRequestBody defines body for PostApiV1Users for application/json ContentType.
type PostApiV1UsersJSONRequestBody PostApiV1UsersJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This API returns the list of accounts
	// (POST /api/v1/accounts)
	PostApiV1Accounts(w http.ResponseWriter, r *http.Request, params PostApiV1AccountsParams)
	// This API returns the list of account entitlement association for entitlement type group
	// (GET /api/v1/accounts/group_memberships)
	GetApiV1AccountsGroupMemberships(w http.ResponseWriter, r *http.Request)
	// This API returns the list of account entitlement association for entitlement type role
	// (GET /api/v1/accounts/role_memberships)
	GetApiV1AccountsRoleMemberships(w http.ResponseWriter, r *http.Request)
	// This API can be used to change password of an account
	// (PUT /api/v1/changePassword)
	PutApiV1ChangePassword(w http.ResponseWriter, r *http.Request)
	// This API creates an account
	// (POST /api/v1/createAccount)
	PostApiV1CreateAccount(w http.ResponseWriter, r *http.Request)
	// This API grants group access to an account
	// (PUT /api/v1/entitlement/group/addAccess)
	PutApiV1EntitlementGroupAddAccess(w http.ResponseWriter, r *http.Request)
	// This API removes group access from an account
	// (PUT /api/v1/entitlement/group/removeAccess)
	PutApiV1EntitlementGroupRemoveAccess(w http.ResponseWriter, r *http.Request)
	// This API grants role access to an account
	// (PUT /api/v1/entitlement/role/addAccess)
	PutApiV1EntitlementRoleAddAccess(w http.ResponseWriter, r *http.Request)
	// This API removes role access from an account
	// (PUT /api/v1/entitlement/role/removeAccess)
	PutApiV1EntitlementRoleRemoveAccess(w http.ResponseWriter, r *http.Request)
	// This API returns the list of group type entitlements
	// (POST /api/v1/entitlements/groups)
	PostApiV1EntitlementsGroups(w http.ResponseWriter, r *http.Request, params PostApiV1EntitlementsGroupsParams)
	// This API returns the list of role type entitlements
	// (POST /api/v1/entitlements/roles)
	PostApiV1EntitlementsRoles(w http.ResponseWriter, r *http.Request, params PostApiV1EntitlementsRolesParams)
	// This API deletes an account
	// (DELETE /api/v1/removeAccount/{accountID})
	DeleteApiV1RemoveAccountAccountID(w http.ResponseWriter, r *http.Request, accountID string)
	// This API updates an account
	// (PATCH /api/v1/updateAccount/{accountID1})
	PatchApiV1UpdateAccountAccountID1(w http.ResponseWriter, r *http.Request, accountID1 string)
	// This API enables an account
	// (PATCH /api/v1/updateAccount/{accountID2})
	PatchApiV1UpdateAccountAccountID2(w http.ResponseWriter, r *http.Request, accountID2 string)
	// This API disables an account
	// (PATCH /api/v1/updateAccount/{accountID3})
	PatchApiV1UpdateAccountAccountID3(w http.ResponseWriter, r *http.Request, accountID3 string)
	// This API updates a user
	// (PATCH /api/v1/updateUser/{userName})
	PatchApiV1UpdateUserUserName(w http.ResponseWriter, r *http.Request, userName string)
	// This API returns the list of users
	// (POST /api/v1/users)
	PostApiV1Users(w http.ResponseWriter, r *http.Request, params PostApiV1UsersParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// This API returns the list of accounts
// (POST /api/v1/accounts)
func (_ Unimplemented) PostApiV1Accounts(w http.ResponseWriter, r *http.Request, params PostApiV1AccountsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API returns the list of account entitlement association for entitlement type group
// (GET /api/v1/accounts/group_memberships)
func (_ Unimplemented) GetApiV1AccountsGroupMemberships(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API returns the list of account entitlement association for entitlement type role
// (GET /api/v1/accounts/role_memberships)
func (_ Unimplemented) GetApiV1AccountsRoleMemberships(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API can be used to change password of an account
// (PUT /api/v1/changePassword)
func (_ Unimplemented) PutApiV1ChangePassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API creates an account
// (POST /api/v1/createAccount)
func (_ Unimplemented) PostApiV1CreateAccount(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API grants group access to an account
// (PUT /api/v1/entitlement/group/addAccess)
func (_ Unimplemented) PutApiV1EntitlementGroupAddAccess(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API removes group access from an account
// (PUT /api/v1/entitlement/group/removeAccess)
func (_ Unimplemented) PutApiV1EntitlementGroupRemoveAccess(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API grants role access to an account
// (PUT /api/v1/entitlement/role/addAccess)
func (_ Unimplemented) PutApiV1EntitlementRoleAddAccess(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API removes role access from an account
// (PUT /api/v1/entitlement/role/removeAccess)
func (_ Unimplemented) PutApiV1EntitlementRoleRemoveAccess(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API returns the list of group type entitlements
// (POST /api/v1/entitlements/groups)
func (_ Unimplemented) PostApiV1EntitlementsGroups(w http.ResponseWriter, r *http.Request, params PostApiV1EntitlementsGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API returns the list of role type entitlements
// (POST /api/v1/entitlements/roles)
func (_ Unimplemented) PostApiV1EntitlementsRoles(w http.ResponseWriter, r *http.Request, params PostApiV1EntitlementsRolesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API deletes an account
// (DELETE /api/v1/removeAccount/{accountID})
func (_ Unimplemented) DeleteApiV1RemoveAccountAccountID(w http.ResponseWriter, r *http.Request, accountID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API updates an account
// (PATCH /api/v1/updateAccount/{accountID1})
func (_ Unimplemented) PatchApiV1UpdateAccountAccountID1(w http.ResponseWriter, r *http.Request, accountID1 string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API enables an account
// (PATCH /api/v1/updateAccount/{accountID2})
func (_ Unimplemented) PatchApiV1UpdateAccountAccountID2(w http.ResponseWriter, r *http.Request, accountID2 string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API disables an account
// (PATCH /api/v1/updateAccount/{accountID3})
func (_ Unimplemented) PatchApiV1UpdateAccountAccountID3(w http.ResponseWriter, r *http.Request, accountID3 string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API updates a user
// (PATCH /api/v1/updateUser/{userName})
func (_ Unimplemented) PatchApiV1UpdateUserUserName(w http.ResponseWriter, r *http.Request, userName string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// This API returns the list of users
// (POST /api/v1/users)
func (_ Unimplemented) PostApiV1Users(w http.ResponseWriter, r *http.Request, params PostApiV1UsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostApiV1Accounts operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Accounts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiV1AccountsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "pagesize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagesize", r.URL.Query(), &params.Pagesize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagesize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1Accounts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1AccountsGroupMemberships operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1AccountsGroupMemberships(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1AccountsGroupMemberships(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1AccountsRoleMemberships operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1AccountsRoleMemberships(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1AccountsRoleMemberships(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1ChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1ChangePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1CreateAccount operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1CreateAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1CreateAccount(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1EntitlementGroupAddAccess operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1EntitlementGroupAddAccess(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1EntitlementGroupAddAccess(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1EntitlementGroupRemoveAccess operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1EntitlementGroupRemoveAccess(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1EntitlementGroupRemoveAccess(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1EntitlementRoleAddAccess operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1EntitlementRoleAddAccess(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1EntitlementRoleAddAccess(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1EntitlementRoleRemoveAccess operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1EntitlementRoleRemoveAccess(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1EntitlementRoleRemoveAccess(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1EntitlementsGroups operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1EntitlementsGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiV1EntitlementsGroupsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "pagesize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagesize", r.URL.Query(), &params.Pagesize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagesize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1EntitlementsGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1EntitlementsRoles operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1EntitlementsRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiV1EntitlementsRolesParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "pagesize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagesize", r.URL.Query(), &params.Pagesize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagesize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1EntitlementsRoles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1RemoveAccountAccountID operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1RemoveAccountAccountID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "accountID" -------------
	var accountID string

	err = runtime.BindStyledParameterWithOptions("simple", "accountID", chi.URLParam(r, "accountID"), &accountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1RemoveAccountAccountID(w, r, accountID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchApiV1UpdateAccountAccountID1 operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1UpdateAccountAccountID1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "accountID1" -------------
	var accountID1 string

	err = runtime.BindStyledParameterWithOptions("simple", "accountID1", chi.URLParam(r, "accountID1"), &accountID1, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountID1", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchApiV1UpdateAccountAccountID1(w, r, accountID1)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchApiV1UpdateAccountAccountID2 operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1UpdateAccountAccountID2(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "accountID2" -------------
	var accountID2 string

	err = runtime.BindStyledParameterWithOptions("simple", "accountID2", chi.URLParam(r, "accountID2"), &accountID2, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountID2", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchApiV1UpdateAccountAccountID2(w, r, accountID2)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchApiV1UpdateAccountAccountID3 operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1UpdateAccountAccountID3(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "accountID3" -------------
	var accountID3 string

	err = runtime.BindStyledParameterWithOptions("simple", "accountID3", chi.URLParam(r, "accountID3"), &accountID3, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountID3", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchApiV1UpdateAccountAccountID3(w, r, accountID3)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchApiV1UpdateUserUserName operation middleware
func (siw *ServerInterfaceWrapper) PatchApiV1UpdateUserUserName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userName" -------------
	var userName string

	err = runtime.BindStyledParameterWithOptions("simple", "userName", chi.URLParam(r, "userName"), &userName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userName", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchApiV1UpdateUserUserName(w, r, userName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1Users operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Users(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiV1UsersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "pagesize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pagesize", r.URL.Query(), &params.Pagesize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pagesize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1Users(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/accounts", wrapper.PostApiV1Accounts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/accounts/group_memberships", wrapper.GetApiV1AccountsGroupMemberships)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/accounts/role_memberships", wrapper.GetApiV1AccountsRoleMemberships)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/changePassword", wrapper.PutApiV1ChangePassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/createAccount", wrapper.PostApiV1CreateAccount)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/entitlement/group/addAccess", wrapper.PutApiV1EntitlementGroupAddAccess)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/entitlement/group/removeAccess", wrapper.PutApiV1EntitlementGroupRemoveAccess)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/entitlement/role/addAccess", wrapper.PutApiV1EntitlementRoleAddAccess)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/entitlement/role/removeAccess", wrapper.PutApiV1EntitlementRoleRemoveAccess)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/entitlements/groups", wrapper.PostApiV1EntitlementsGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/entitlements/roles", wrapper.PostApiV1EntitlementsRoles)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/removeAccount/{accountID}", wrapper.DeleteApiV1RemoveAccountAccountID)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/updateAccount/{accountID1}", wrapper.PatchApiV1UpdateAccountAccountID1)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/updateAccount/{accountID2}", wrapper.PatchApiV1UpdateAccountAccountID2)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/updateAccount/{accountID3}", wrapper.PatchApiV1UpdateAccountAccountID3)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/updateUser/{userName}", wrapper.PatchApiV1UpdateUserUserName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/users", wrapper.PostApiV1Users)
	})

	return r
}
